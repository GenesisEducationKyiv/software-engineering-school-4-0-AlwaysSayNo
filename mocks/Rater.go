// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	dto "genesis-currency-api/internal/module/currency/dto"

	mock "github.com/stretchr/testify/mock"
)

// Rater is an autogenerated mock type for the Rater type
type Rater struct {
	mock.Mock
}

// GetCurrencyRate provides a mock function with given fields:
func (_m *Rater) GetCurrencyRate() (dto.CurrencyResponseDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencyRate")
	}

	var r0 dto.CurrencyResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() (dto.CurrencyResponseDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() dto.CurrencyResponseDTO); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dto.CurrencyResponseDTO)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRater creates a new instance of Rater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRater(t interface {
	mock.TestingT
	Cleanup(func())
}) *Rater {
	mock := &Rater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
